{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "7week.ipynb",
      "private_outputs": true,
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMi5k5hPWATBDqBRrte3Xd3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/s2ul2/bitamin/blob/main/7week.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aNedLZEqFUCs"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CVK_CT8DkMkC"
      },
      "source": [
        "# 선형 회귀"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iS76OWXRGA6Z"
      },
      "source": [
        "# 보스턴 주택 데이터셋\n",
        "from sklearn import datasets\n",
        "housing = datasets.load_boston()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q2chF3AeGDOq"
      },
      "source": [
        "housing.keys()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uSJa-vubGDUJ"
      },
      "source": [
        "# pandas dataframe로 변환\n",
        "data = pd.DataFrame(housing['data'], columns = housing['feature_names'])\n",
        "target = pd.DataFrame(housing['target'], columns = ['Target']) \n",
        "\n",
        "# 데이터 셋 크기\n",
        "print(data.shape)\n",
        "print(target.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iXzoSuvMGDaE"
      },
      "source": [
        "# 데이터 프레임 결합 - data와 target\n",
        "df = pd.concat([data, target], axis = 1)\n",
        "df.head(3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mPZQwkyRGDfy"
      },
      "source": [
        "df.info"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bJorqzOCGDlg"
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9-tPiQY4GDq8"
      },
      "source": [
        "# 상관관계 분석\n",
        "df_corr = df.corr()\n",
        "\n",
        "plt.figure(figsize = (10, 10))\n",
        "sns.set(font_scale = 0.8)\n",
        "sns.heatmap(df_corr, annot = True, cbar = False)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mzS7BAFqGDxT"
      },
      "source": [
        "# target 변수와 상관관계가 높은 순으로 출력\n",
        "corr_order = df.corr().loc[:'LSTAT', 'Target'].abs().sort_values(ascending = False)\n",
        "corr_order"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d0ueaz8AGD2u"
      },
      "source": [
        "# 시각화로 분석할 피처 선택 추출\n",
        "plot_cols = ['Target', 'LSTAT', 'RM', 'PTRATIO', 'INDUS']\n",
        "plot_df = df.loc[:, plot_cols]\n",
        "plot_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kE82miwIGD8b"
      },
      "source": [
        "# regplot으로 선형회귀선 표시\n",
        "plt.figure(figsize = (10, 10))\n",
        "for idx, col in enumerate(plot_cols[1:]):\n",
        "    ax1 = plt.subplot(2, 2, idx + 1)\n",
        "    sns.regplot(x = col, y = plot_cols[0], data = plot_df, ax = ax1)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LvWdpu3RGECT"
      },
      "source": [
        "# 피처 스케일링\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "df_scaled = df.iloc[:, :-1] # 마지막 열인 target을 제외하고 스케일러를 돌림\n",
        "scaler.fit(df_scaled)\n",
        "df_scaled = scaler.transform(df_scaled)\n",
        "\n",
        "# 스케일링 변환된 값을 데이터프레임에 반영\n",
        "df.iloc[:, :-1] = df_scaled[:, :]\n",
        "df.head()\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FQ9NYmjFGEIT"
      },
      "source": [
        "# 학습 데이터와 테스트 데이터 분할\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_data = df.loc[:, ['LSTAT', 'RM']]\n",
        "y_data = df.loc[:, 'Target']\n",
        "x_train, x_test, y_train, y_test = train_test_split(x_data,\n",
        "                                                    y_data,\n",
        "                                                    test_size = 0.2,\n",
        "                                                    shuffle = True,\n",
        "                                                    random_state = 12)\n",
        "print(x_train.shape, y_train.shape)\n",
        "print(x_test.shape, y_test.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fX2-cApeGEN-"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "lr = LinearRegression()\n",
        "lr.fit(x_train, y_train)\n",
        "\n",
        "print(\"회귀계수(기울기) : \", np.round(lr.coef_, 1))\n",
        "print(\"상수항(절편) : \", np.round(lr.intercept_, 1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qFirOfzYgVqX"
      },
      "source": [
        "y_test_pred = lr.predict(x_test)\n",
        "\n",
        "# 예측값과 실제값의 분포\n",
        "plt.figure(figsize = (10, 5))\n",
        "plt.scatter(x_test['LSTAT'], y_test, label = 'y_test')\n",
        "plt.scatter(x_test['LSTAT'], y_test_pred, c = 'r', label = 'y_pred')\n",
        "plt.legend(loc = 'best')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vWK2NCwJgVv6"
      },
      "source": [
        "# 성능 평가 - MSE 사용\n",
        "from sklearn.metrics import mean_squared_error\n",
        "y_train_pred = lr.predict(x_train)\n",
        "\n",
        "train_mse = mean_squared_error(y_train, y_train_pred)  # 훈련 데이터의 평가 점수\n",
        "print('Train MSE : %.4f' % train_mse)\n",
        "\n",
        "test_mse = mean_squared_error(y_test, y_test_pred)\n",
        "print('Test MSE : %.4f' % test_mse)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Ee0rRHHkP2o"
      },
      "source": [
        "# 로버스트 회귀"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L-0XN7UigV1e"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4MFQkFCpmcAA"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P4NPJRbmgV7C"
      },
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/housing.data.txt', header = None, sep='\\s+')\n",
        "df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kAOEqDdXgWAX"
      },
      "source": [
        "# 선형 회귀\n",
        "from sklearn.linear_model import LinearRegression\n",
        "slr = LinearRegression(fit_intercept = True)\n",
        "X = df[['RM']].values\n",
        "y = df[['MEDV']].values\n",
        "slr.fit(X, y)\n",
        "print('기울기 : %.3f' % slr.coef_[0])\n",
        "print('절편 : %.3f' % slr.intercept_)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(X, y, c = 'steelblue', edgecolor = 'white', s = 70)\n",
        "plt.plot(X, slr.predict(X), color = 'black', lw = 2)\n",
        "plt.xlabel('Average number of rooms [RM]')\n",
        "plt.ylabel('Price in $1000s [MEDV]')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pVkwr4HXgWK8"
      },
      "source": [
        "# RANSAC Regressor\n",
        "from sklearn.linear_model import RANSACRegressor\n",
        "ransac = RANSACRegressor(LinearRegression(),\n",
        "                         max_trials = 100,\n",
        "                         min_samples = 50,\n",
        "                         loss = 'absolute_loss',\n",
        "                         residual_threshold = 5.0,\n",
        "                         random_state = 0)\n",
        "\n",
        "# 선형회귀분석 수행\n",
        "ransac.fit(X, y)\n",
        "\n",
        "# 데이터들이 오차 범위 내에 있는지 여부를 저장한 배열을 가져와서 저장\n",
        "inlier_mask = ransac.inlier_mask_\n",
        "\n",
        "# 배열 값을 반대로 만들어서 저장\n",
        "outlier_mask = np.logical_not(inlier_mask)\n",
        "\n",
        "# 그래프를 그릴 범위 설정\n",
        "line_X = np.arange(3, 10, 1)\n",
        "\n",
        "# 그릴 범위에 해당하는 데이터의 예측값 가져오기\n",
        "line_y_ransac = ransac.predict(line_X[:, np.newaxis])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T-ddJtvLquog"
      },
      "source": [
        "# 실제 데이터를 산점도로 표현\n",
        "plt.scatter(X[inlier_mask], y[inlier_mask],\n",
        "            c = 'steelblue', edgecolor = 'white',\n",
        "            marker = 'o', label = 'Inliers')\n",
        "plt.scatter(X[outlier_mask], y [outlier_mask],\n",
        "            c = 'limegreen', edgecolor = 'white',\n",
        "            marker = 's', label = 'Outliers')\n",
        "# 예측 모델을 선 그래프로 표현\n",
        "plt.plot(line_X, line_y_ransac, color = 'black', lw = 2)\n",
        "plt.xlabel(\"Average number of rooms [RM]\")\n",
        "plt.ylabel('Price in $1000s [MEDV]')\n",
        "plt.legend(loc = 'upper left')\n",
        "\n",
        "print('기울기 : %.3f' % ransac.estimator_.coef_[0])\n",
        "print('절편 : %.3f' % ransac.estimator_.intercept_)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YXmYPpBsr2aG"
      },
      "source": [
        "# 로지스틱 회귀"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aQr5P6lHpU5K"
      },
      "source": [
        "x = np.linspace(-10, 10)\n",
        "print('input\\n', x)\n",
        "\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "output = sigmoid(x)\n",
        "print('output\\n', output)\n",
        "\n",
        "threshold = 0.5\n",
        "print(len(output))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-XzepcZzr4uH"
      },
      "source": [
        "clfied_1 = output[output >= 0.5]\n",
        "clfied_0 = output[output < 0.5]\n",
        "\n",
        "plt.plot(x, output, color = 'r', linewidth = 3, zorder = 0)\n",
        "\n",
        "plt.scatter(x, output, c = [clfied_1, clfied_0])\n",
        "\n",
        "plt.axhline(0.5, color = 'r', linestyle = '--', label = 'Threshold')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L29x_gM1r4yz"
      },
      "source": [
        "# logistic regression으로 유방암 유무 예측\n",
        "%matplotlib inline\n",
        "from sklearn.preprocessing import StandardScaler \n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# 데이터 로드\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "cancer = load_breast_cancer()\n",
        "cancer\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MrLnRXUCr43G"
      },
      "source": [
        "# 데이터 분포 확인\n",
        "# 전처리 - 정규화\n",
        "scaler = StandardScaler()\n",
        "data_scaled = scaler.fit_transform(cancer.data)\n",
        "print('압축 전의 shape \\n', data_scaled.shape)\n",
        "\n",
        "# 전처리 - feature 압축\n",
        "# feature가 여러개라 단일 변수에 대한 분포를 확인하기 힘들어서, 여러 변수들의 특성을 고려해 압축한 하나의 피쳐로 만듦\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "pca = PCA(n_components = 1)\n",
        "pca.fit(data_scaled)\n",
        "pca_data = pca.transform(data_scaled)\n",
        "print('압축 후의 shape \\n', pca_data.shape)\n",
        "\n",
        "# 시각화\n",
        "plt.scatter(pca_data, cancer.target)\n",
        "plt.xlabel('Pressured Features as One')\n",
        "plt.ylabel('Distribution of Breast Cancer')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MKbU06y4r47z"
      },
      "source": [
        "# 로지스틱 회귀를 이용하여 학습 및 예측 수행\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# train / test 데이터 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(pca_data,\n",
        "                                                    cancer.target,\n",
        "                                                    test_size = 0.3,\n",
        "                                                    random_state = 0)\n",
        "\n",
        "# 모델 학습 수행\n",
        "lr_clf = LogisticRegression()\n",
        "lr_clf.fit(X_train, y_train)\n",
        "lr_preds = lr_clf.predict(X_test)\n",
        "\n",
        "# predict_proba로 모델이 예측한 확률값 반환\n",
        "lr_proba = lr_clf.predict_proba(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_NCTEVc-r5AA"
      },
      "source": [
        "# 주어진 데이터의 원래 분포\n",
        "plt.scatter(pca_data, cancer.target)\n",
        "\n",
        "# 주황색 : logistic regression이 분류한 값\n",
        "plt.scatter(X_test, lr_preds)\n",
        "\n",
        "# 초록색 : logistic regression이 예측한 확률\n",
        "plt.scatter(X_test, lr_proba[:, 1])\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# accuracy와 roc_auc 측정\n",
        "from sklearn.metrics import accuracy_score, roc_auc_score\n",
        "print('accuracy : {:0.3f}'.format(accuracy_score(y_test, lr_preds)))\n",
        "print('roc_auc : {:0.3f}'.format(roc_auc_score(y_test, lr_preds)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tfa-KE4rr5I7"
      },
      "source": [
        "# 단일 입력 로지스틱 회귀\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "import numpy as np"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G9ZXFjDbr5N6"
      },
      "source": [
        "model = Sequential()\n",
        "# 입력 1개를 받아 출력 1개를 return하는 선형 회귀 레이어를 생성\n",
        "model.add(Dense(input_dim = 1, units = 1))\n",
        "# 선형 회귀의 출력값을 시그모이드에 연결\n",
        "model.add(Activation('sigmoid'))\n",
        "# 크로스 엔트로피를 비용함수로 설정해 경사하강법으로 학습\n",
        "model.compile(loss = 'binary_crossentropy',\n",
        "              optimizer = 'sgd', metrics = ['binary_accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "55N6goF7pU8e"
      },
      "source": [
        "# 데이터 생성\n",
        "X = np.array([-2, -1.5, -1, 1.25, 1.62, 2])\n",
        "Y = np.array([0, 0, 0, 1, 1, 1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k5u8QVM7pU_v"
      },
      "source": [
        "# 모델 학습 - 300번의 반복 학습을 통해 최적의 w와 b 찾기\n",
        "model.fit(X, Y, epochs = 300, verbose = 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "igZ_DuyNudaO"
      },
      "source": [
        "model.predict([-2, -1.5, -1, 1.25, 1.62, 2])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "adZ1TQuxudfp"
      },
      "source": [
        "# 시그모이드 특성상 왼쪽 극한 값은 0, 오른쪽 극한 값은 1로 수렴\n",
        "model.predict([-1000, 1000])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "drVrNeN1udlD"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a2_HPfEdudqX"
      },
      "source": [
        "model.layers[0].weights"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VpeghmwFudwP"
      },
      "source": [
        "model.layers[0].get_weights()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vR3J0fAcud1_"
      },
      "source": [
        "# 소프트맥스 (다중 분류 로지스틱 회귀)\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.datasets import mnist"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lQJwxi9ivnkZ"
      },
      "source": [
        "(X_train, y_train), (X_test, y_test) = mnist.load_data()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aI5HoppZvnyH"
      },
      "source": [
        "# 정규화\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train /= 255\n",
        "X_test /= 255"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ONT--3Ssvn_m"
      },
      "source": [
        "# 행과 열 구분 없이 단순히 784(28*28) 길이의 배열로 데이터 단순화\n",
        "input_dim = 784\n",
        "X_train = X_train.reshape(60000, input_dim)\n",
        "X_test = X_test.reshape(10000, input_dim)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5_z7lgO1voNw"
      },
      "source": [
        "# One-hot encoding\n",
        "num_classes = 10\n",
        "y_train = to_categorical(y_train, num_classes)\n",
        "y_test = to_categorical(y_test, num_classes)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GV3DM_Ydvobh"
      },
      "source": [
        "print(y_train[0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JjkftLzbpVDl"
      },
      "source": [
        "# 소프트맥스 구현\n",
        "model = Sequential()\n",
        "model.add(Dense(input_dim = input_dim, units = 10, activation = 'softmax'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CnfYSYDIgWP0"
      },
      "source": [
        "model.compile(optimizer = 'sgd', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n",
        "model.fit(X_train, y_train, batch_size = 2048, epochs = 100, verbose = 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xrNNbtkFznsc"
      },
      "source": [
        "score = model.evaluate(X_test, y_test)\n",
        "print('Test accuracy :', score[1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G58z4rMrznzg"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yIuwAAS6zn46"
      },
      "source": [
        "model.layers[0].weights"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JSUqoCC1GJtZ"
      },
      "source": [
        "# 규제화 실습 - 선형회귀"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dtKcLUgeBvIm"
      },
      "source": [
        "from sklearn.datasets import load_boston\n",
        "from sklearn.linear_model import Ridge, Lasso, ElasticNet\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score\n",
        "from sklearn.model_selection import validation_curve, train_test_split\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntS4ZedjBvNm"
      },
      "source": [
        "boston = load_boston()\n",
        "\n",
        "# 설명변수(X), 반응변수(y) 나누기\n",
        "X = pd.DataFrame(boston.data, columns = boston.feature_names)\n",
        "y = boston.target"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nb2nXSm9BvRg"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X,\n",
        "                                                    y,\n",
        "                                                    test_size = 0.3,\n",
        "                                                    random_state = 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R4TXYnwUBvVk"
      },
      "source": [
        "# scaling\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ueUCrTzCBvY_"
      },
      "source": [
        "X_train = X_train_scaled\n",
        "X_test = X_test_scaled"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ca_c8g0GBvcS"
      },
      "source": [
        "# Linear regression vs Ridge vs Lasso 비교\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "model_LR = LinearRegression(n_jobs = -1)\n",
        "model_LR.fit(X_train, y_train)\n",
        "pd.DataFrame(model_LR.coef_,\n",
        "             index = X.columns, columns = ['Linear regression 계수'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E9kSsOswBvfg"
      },
      "source": [
        "# hyperparameter 임의 지정\n",
        "model_Ridge1 = Ridge(alpha = 0.01, random_state = 1)\n",
        "model_Ridge2 = Ridge(alpha = 1.0, random_state = 1)\n",
        "model_Lasso1 = Lasso(alpha = 0.01, random_state = 1)\n",
        "model_Lasso2 = Lasso(alpha = 1.0, random_state = 1)\n",
        "\n",
        "model_Ridge1.fit(X_train, y_train)\n",
        "model_Ridge2.fit(X_train, y_train)\n",
        "model_Lasso1.fit(X_train, y_train)\n",
        "model_Lasso2.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3AhF45MXBvi3"
      },
      "source": [
        "Lasso(random_state = 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ExUGKFOGBvmD"
      },
      "source": [
        "plt.figure(figsize = (10, 5))\n",
        "plt.plot(sorted(np.abs(model_LR.coef_))[::-1], label = 'LR', c = 'gray')\n",
        "plt.plot(sorted(np.abs(model_Ridge1.coef_))[::-1], label = 'Ridge alpha = 0.01')\n",
        "plt.plot(sorted(np.abs(model_Ridge2.coef_))[::-1], label = 'Ridge alpha = 1')\n",
        "plt.plot(sorted(np.abs(model_Lasso1.coef_))[::-1], label = 'Lasso alpha = 0.01')\n",
        "plt.plot(sorted(np.abs(model_Lasso2.coef_))[::-1], label = 'Lasso alpha = 1')\n",
        "plt.legend()\n",
        "plt.ylim((-0.1, 3))\n",
        "plt.xlim((0, 14))\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4owDg69BGN4D"
      },
      "source": [
        "# 규제화 실습 - 로지스틱 회귀"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EkQA1Hl_BvpH"
      },
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "cancer = load_breast_cancer()\n",
        "cancer"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XrDksl6MBvsQ"
      },
      "source": [
        "df = pd.DataFrame(cancer['data'], columns = cancer['feature_names'])\n",
        "df['target'] = cancer.target\n",
        "df.info()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fJqnMfsGGXCX"
      },
      "source": [
        "X, y = df.iloc[:, :30].values, df.iloc[:, 30].values\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,\n",
        "                                                    y,\n",
        "                                                    test_size = 0.3,\n",
        "                                                    random_state = 1,\n",
        "                                                    stratify = y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OHUXraJgGXHH"
      },
      "source": [
        "# 표준화\n",
        "std = StandardScaler()\n",
        "X_train_std = std.fit_transform(X_train)\n",
        "X_test_std = std.transform(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qIs_uq9HGXLB"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "lr2_10 = LogisticRegression(penalty = 'l2', C = 10.0)\n",
        "lr2_1 = LogisticRegression(penalty = 'l2', C = 1.0)\n",
        "lr2_0_1 = LogisticRegression(penalty = 'l2', C = 0.1)\n",
        "lr1_10 = LogisticRegression(penalty = 'l1', C = 10.0, solver = 'liblinear')\n",
        "lr1_1 = LogisticRegression(penalty = 'l1', C = 1.0, solver = 'liblinear')\n",
        "lr1_0_1 = LogisticRegression(penalty = 'l1', C = 0.1, solver = 'liblinear')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iy5jUDD8GXPJ"
      },
      "source": [
        "lr2_10.fit(X_train_std, y_train)\n",
        "lr2_1.fit(X_train_std, y_train)\n",
        "lr2_0_1.fit(X_train_std, y_train)\n",
        "lr1_10.fit(X_train_std, y_train)\n",
        "lr1_1.fit(X_train_std, y_train)\n",
        "lr1_0_1.fit(X_train_std, y_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ESGZSzaiGXTP"
      },
      "source": [
        "plt.figure(figsize = (10, 5))\n",
        "plt.plot(sorted(np.abs(lr2_10.coef_[0])[::]))\n",
        "plt.plot(sorted(np.abs(lr2_1.coef_[0])[::]))\n",
        "plt.plot(sorted(np.abs(lr2_0_1.coef_[0])[::]))\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wtBHvhuuGXW_"
      },
      "source": [
        "plt.figure(figsize = (10, 5))\n",
        "plt.plot(sorted(np.abs(lr1_10.coef_[0])[::-1]))\n",
        "plt.plot(sorted(np.abs(lr1_1.coef_[0])[::-1]))\n",
        "plt.plot(sorted(np.abs(lr1_0_1.coef_[0])[::-1]))\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c5csG1XCBvvm"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UTNGMWwBBvyv"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
